# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
# config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow locally loaded documents to access remote URLs.
# Type: Bool
config.set('content.local_content_can_access_remote_urls', True, 'file:///home/novel2430/.local/share/qutebrowser/userscripts/*')

# Allow locally loaded documents to access other local URLs.
# Type: Bool
config.set('content.local_content_can_access_file_urls', False, 'file:///home/novel2430/.local/share/qutebrowser/userscripts/*')

# Basic Config
c.url.default_page = 'about:blank'
c.url.start_pages = [
    'https://www.google.com'
]
c.url.searchengines = {
    '?': 'https://google.de/search?q={}',
    '?dd': 'https://duckduckgo.com/?q={}',
    '?github': 'https://github.com/search?type=Repositories&q={}',
    '?nix': 'https://search.nixos.org/packages?query={}',
    '?yt': 'https://www.youtube.com/results?search_query={}',
    'DEFAULT': 'https://google.de/search?q={}'
}
c.editor.command = ["alacritty", "-e", "nvim", "{file}"]
## Content
c.content.autoplay = True
c.content.blocking.whitelist = ['www.googleadservices.com']
c.content.javascript.clipboard = "access"
c.content.plugins = True
# c.content.headers.user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.2849.80'
## QT
# c.qt.args = [
#     '[ppapi-widevine-path=/nix/store/54mwjqwzr0r55izza3vmwc2snp5xc54f-widevine-cdm-4.10.2710.0/share/google/chrome/WidevineCdm/_platform_specific/linux_x64/libwidevinecdm.so]'
# ]
## Key Binding
c.bindings.commands = {
    'normal': {
        '+': 'zoom-in',
        ',M': 'hint links spawn mpv {hint-url}',
        ',h': 'history',
        # ',m': 'spawn --detach mpv {url}',
        'H': 'tab-prev',
        'L': 'tab-next',
        '-': 'zoom-out',
        '<Alt-D>': 'edit-url',
        '<Ctrl-0>': 'zoom',
        '<Ctrl-Shift-Tab>': 'tab-prev',
        '<Ctrl-Tab>': 'tab-next',
        '<Ctrl-f>': 'cmd-set-text /',
        '<Ctrl-Right>': 'forward',
        '<Ctrl-Left>': 'back',
        '?': 'cmd-set-text -s :open -t ?',
        'Q': 'cmd-set-text -s :quickmark-load',
        'd': '',
        'gG': 'quickmark-load Google',
        'gB': 'quickmark-load BiliBili',
        'gN': 'quickmark-load Netflix',
        'gY': 'quickmark-load Youtube',
    },
    'insert': {
        '<Ctrl-+>': 'zoom-in',
        '<Ctrl-->': 'zoom-out',
        '<Ctrl-0>': 'zoom',
        '<Escape>': 'mode-leave ;; jseval -q document.activeElement.blur()'
    }
}

# Them Settings
my_colors = {
    'background': '#3b4252',
    'background-2': '#4c566a',
    'foreground': '#eceff4',
    'select-background': '#6e7275',
    'error': '#d22854',
    'warning': '#fdb730',
    'green': '#38f79b',
}
## Fonts Setting
font_size = 15
defualt_font_size = '{:d}pt'.format(font_size)
c.fonts.default_family = [
    'Hack Nerd Font'
    'WenQuanYi Zen Hei'
]
c.fonts.default_size = defualt_font_size
## Tabs
### Function Setting
c.tabs.last_close = 'startpage'
c.tabs.mousewheel_switching = False
c.tabs.background = True
### Style
c.tabs.position = 'top'
c.tabs.padding = {
    'top': 2,
    'bottom': 2,
    'left': 10,
    'right': 0
}
c.tabs.title.format = '[{index}]{audio}{perc}: {current_title}';
c.colors.webpage.darkmode.enabled = False
### Background color of the tab bar.
c.colors.tabs.bar.bg = my_colors.get('background')
### Unselected tabs Color
c.colors.tabs.odd.bg = my_colors.get('background')
c.colors.tabs.even.bg = my_colors.get('background')
c.colors.tabs.odd.fg = my_colors.get('foreground')
c.colors.tabs.even.fg = my_colors.get('foreground')
### Selected tabs Color
c.colors.tabs.selected.odd.bg = my_colors.get('select-background')
c.colors.tabs.selected.even.bg = my_colors.get('select-background')
c.colors.tabs.selected.odd.fg = my_colors.get('foreground')
c.colors.tabs.selected.even.fg = my_colors.get('foreground')
### Indicator
c.tabs.indicator.width = 0
### Fonts
c.fonts.tabs.selected = 'normal bold {}'.format(defualt_font_size)
c.fonts.tabs.unselected = 'normal normal {}'.format(defualt_font_size)
## Status Bar
### Function Setting
c.statusbar.show = 'in-mode'
### Style
c.statusbar.position = 'bottom'
c.statusbar.padding = {
    'top': 2,
    'bottom': 2,
    'left': 2,
    'right': 2
}
### Caret Mode Color (Visual Mode)
c.colors.statusbar.caret.bg = my_colors.get('background')
c.colors.statusbar.caret.fg = my_colors.get('foreground')
c.colors.statusbar.caret.selection.bg = my_colors.get('background')
c.colors.statusbar.caret.selection.fg = my_colors.get('foreground')
### Command Mode Color
c.colors.statusbar.command.bg = my_colors.get('background')
c.colors.statusbar.command.fg = my_colors.get('foreground')
c.colors.statusbar.command.private.bg = my_colors.get('background')
c.colors.statusbar.command.private.fg = my_colors.get('foreground')
### Insert Mode Color
c.colors.statusbar.insert.bg = my_colors.get('background')
c.colors.statusbar.insert.fg = my_colors.get('foreground')
### Normal Mode Color
c.colors.statusbar.normal.bg = my_colors.get('background')
c.colors.statusbar.normal.fg = my_colors.get('foreground')
### Passthrough Mode Color
c.colors.statusbar.passthrough.bg = my_colors.get('background')
c.colors.statusbar.passthrough.fg = my_colors.get('foreground')
### Private Mode Color
c.colors.statusbar.private.bg = my_colors.get('background')
c.colors.statusbar.private.fg = my_colors.get('foreground')
### Progress Bar
c.colors.statusbar.progress.bg = my_colors.get('background')
### URL
c.colors.statusbar.url.fg = my_colors.get('foreground')
c.colors.statusbar.url.hover.fg = my_colors.get('foreground')
c.colors.statusbar.url.success.http.fg = my_colors.get('foreground')
c.colors.statusbar.url.success.https.fg = my_colors.get('foreground')
c.colors.statusbar.url.error.fg = my_colors.get('error')
c.colors.statusbar.url.warn.fg = my_colors.get('warning')
## Completion (Menu)
c.completion.height = '25%'
c.colors.completion.fg = my_colors.get('foreground')
c.colors.completion.odd.bg = my_colors.get('background')
c.colors.completion.even.bg = my_colors.get('background-2')
### Selected Item
c.colors.completion.item.selected.bg = my_colors.get('select-background')
c.colors.completion.item.selected.fg = my_colors.get('foreground')
c.colors.completion.item.selected.border.bottom = my_colors.get('select-background')
c.colors.completion.item.selected.border.top = my_colors.get('select-background')
c.colors.completion.item.selected.match.fg = my_colors.get('foreground')
c.colors.completion.match.fg = my_colors.get('foreground')
### Scroll Bar
c.colors.completion.scrollbar.bg = my_colors.get('background')
c.colors.completion.scrollbar.fg = my_colors.get('foreground')
## Download Bar
c.downloads.remove_finished = 10000
c.colors.downloads.bar.bg = my_colors.get('background')
### Error
c.colors.downloads.error.bg = my_colors.get('background') 
c.colors.downloads.error.fg = my_colors.get('error') 
### Start
c.colors.downloads.start.bg = my_colors.get('background')
c.colors.downloads.start.fg = my_colors.get('green')
### Stop
c.colors.downloads.stop.bg = my_colors.get('background')
c.colors.downloads.stop.fg = my_colors.get('foreground')
## Message
### Error
c.colors.messages.error.bg = my_colors.get('background')
c.colors.messages.error.border = my_colors.get('background')
c.colors.messages.error.fg = my_colors.get('error')
### Info
c.colors.messages.info.bg = my_colors.get('background')
c.colors.messages.info.border = my_colors.get('background')
c.colors.messages.info.fg = my_colors.get('foreground')
### Warning
c.colors.messages.info.bg = my_colors.get('background')
c.colors.messages.info.border = my_colors.get('background')
c.colors.messages.info.fg = my_colors.get('warning')
## Context Menu (Right Click Menu)
c.colors.contextmenu.menu.bg = my_colors.get('background')
c.colors.contextmenu.menu.fg = my_colors.get('foreground')
c.colors.contextmenu.selected.bg = my_colors.get('select-background')
c.colors.contextmenu.selected.fg = my_colors.get('foreground')
## Hint
c.hints.border = "0px solid #E3BE23"
c.hints.radius = 2
c.colors.hints.bg = my_colors.get('background-2')
c.colors.hints.fg = my_colors.get('foreground')
c.colors.hints.match.fg = my_colors.get('foreground')
## Key Hint
c.colors.keyhint.bg = my_colors.get('background-2')
c.colors.keyhint.fg = my_colors.get('foreground')
c.colors.keyhint.suffix.fg = my_colors.get('foreground')
## Prompt
c.prompt.radius = 6
c.colors.prompts.bg = my_colors.get('background')
c.colors.prompts.border = "0px solid gray"
c.colors.prompts.fg = my_colors.get('foreground')
c.colors.prompts.selected.bg = my_colors.get('select-background')
c.colors.prompts.selected.fg = my_colors.get('foreground')

